# source gcc.tmk
source [file join $::tmk::compilersConfigDir gcc.tmk]

# now we override a lot of stuff

set_ifndef QNX_TARGET $::env(QNX_TARGET)
set_ifndef QNX_HOST $::env(QNX_HOST)

config set LINKER $QNX_HOST/usr/bin/ntox86-ld-2.17
config set ASSEMBLER $QNX_HOST/usr/bin/ntox86-as-2.17

# try to find executables, so we don't need this in the site config
switch $__module {
    "cxx" {
		catch {
			config set COMPILER $QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1/cc1plus 
			config set LINK_END_ARGS [list -Y$QNX_TARGET/x86/lib:$QNX_TARGET/x86/usr/lib:$QNX_TARGET/x86/opt/lib -L$QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1/ -L$QNX_TARGET/x86/lib/gcc/4.2.1 -L$QNX_TARGET/usr/i386-pc-nto-qnx6.3.0/lib/ -L$QNX_TARGET/usr/lib -L$QNX_TARGET/x86/lib/ -L$QNX_TARGET/x86/lib -L$QNX_TARGET/x86/usr/lib -L$QNX_TARGET/x86/opt/lib -lcpp -lcxa -lcpp $QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1//libgcc.a -lc -dn -Bstatic -lc $QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1//libgcc.a $QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1/crtend.o $QNX_TARGET/x86/lib/crtn.o]
			config set COMPILE_EXTRA_FLAGS [list -quiet -fno-var-tracking -fno-builtin -nostdinc -nostdinc++ -D__cplusplus -D__QNX__ -D__QNXNTO__ -D__GNUC__=4 -D__GNUC_MINOR__=2 -D__GNUC_PATCHLEVEL__=1 -D__NO_INLINE__ -D__DEPRECATED -D__EXCEPTIONS -D__unix__ -D__unix -D__ELF__ -D__X86__ -D__i386__ -D__LITTLEENDIAN__]
			config set COMPILE_EXTRA_INCLUDES [list -idirafter $QNX_TARGET/usr/include -isystem $QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1/include -isystem $QNX_TARGET/usr/include/cpp/c -isystem $QNX_TARGET/usr/include/cpp]
		}
	}				
    "c" {
		catch {
			config set COMPILER $QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1/cc1
			config set LINK_END_ARGS [list -Y$QNX_TARGET/x86/lib:$QNX_TARGET/x86/usr/lib:$QNX_TARGET/x86/opt/lib -L$QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1 -L$QNX_TARGET/x86/lib/gcc/4.2.1 -L$QNX_TARGET/usr/i386-pc-nto-qnx6.3.0/lib -L$QNX_TARGET/x86/lib -L$QNX_TARGET/x86/usr/lib -L$QNX_TARGET/x86/opt/lib $QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1/libgcc.a -lc -dn -Bstatic -lc $QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1/libgcc.a $QNX_TARGET/x86/lib/crtend.o $QNX_TARGET/x86/lib/crtn.o]
			config set COMPILE_EXTRA_FLAGS [list -quiet -fno-var-tracking -nostdinc -D__LANGUAGE_C -D_LANGUAGE_C -D__QNX__ -D__QNXNTO__ -D__GNUC__=4 -D__GNUC_MINOR__=2 -D__GNUC_PATCHLEVEL__=1 -D__unix__ -D__unix -D__ELF__ -D__X86__ -D__i386__ -D__LITTLEENDIAN__]
			config set COMPILE_EXTRA_INCLUDES [list -idirafter $QNX_TARGET/usr/include -isystem $QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1/include]
		}
	}				
    default {log_msg "warning: qcc is not configured for module $__module" }
}
config set EXECUTABLE $COMPILER

config set STRIP $QNX_HOST/usr/bin/ntox86-strip-2.17
config set AR $QNX_HOST/usr/bin/ntox86-ar-2.17

config set QNX_TARGET $QNX_TARGET
config set QNX_HOST $QNX_HOST

set base_CFLAGS {-fpic}
foreach flag {FLAGS_DBG FLAGS_STD FLAGS_OPT FLAGS_MAX} {
	config set $flag [concat $base_CFLAGS [set $flag]]
}

config set FLAGS_PRF [concat $base_CFLAGS -g3 -p]

config set LDFLAGS_PRF "-p"
foreach flag {LDFLAGS_STD LDFLAGS_OPT LDFLAGS_MAX} {
	config set $flag [concat [set $flag] -DNDEBUG]
}

# link a shared lib
config proc link_shlib {lib obj export_obj libspec flags opt} {
	variable QNX_TARGET
	variable QNX_HOST
	variable LINK_END_ARGS
	
	if {$export_obj != {}} {
		log_msg "warning (gcc): no support for interface subset export"
    }

	if [lcontains $opt "soname"] {
		lappend flags "-soname=[file tail $lib]"
    }
	
    set flags [concat $flags [meta_option_flags $opt]]
    set libs  [make_lib_options $libspec $opt]

	set startArgs [list -b elf32-i386 -m i386nto --dynamic-linker /usr/lib/ldqnx.so.2 -rpath-link $QNX_TARGET/x86/lib:$QNX_TARGET/x86/usr/lib:$QNX_TARGET/x86/opt/lib $QNX_TARGET/x86/lib/crt1.o $QNX_TARGET/x86/lib/crti.o $QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1/crtbegin.o ]

    variable LINKER
	set cmd [concat [list cmd [file nativename $LINKER]]]
    set cmd [concat $cmd "-shared" $flags $startArgs [list "-o" $lib] $obj $libs $LINK_END_ARGS]

    uplevel \#0 $cmd

	if [lcontains $opt "strip"] {
		strip $lib
    }
}

# compile a source file (C or C++) 
config proc compile_obj {obj src dep flags opt} {

    variable COMPILER
	variable ASSEMBLER
	variable COMPILE_EXTRA_FLAGS
	variable COMPILE_EXTRA_INCLUDES

    # convert filenames to native representation, and pay attention
    #   attention that no argument is evaluated too often ('\' problem)!
    set flags [concat $flags [meta_option_flags $opt] $COMPILE_EXTRA_FLAGS]
	lappend flags "-MD" $dep
	set cmd [list "cmd_noexit" [file nativename $COMPILER]]
    set cmd [concat $cmd $flags $COMPILE_EXTRA_INCLUDES]
	lappend cmd $src "-dumpbase" $src "-o" "-" "|" $ASSEMBLER "-o" $obj
	uplevel \#0 $cmd
}

config proc link_exe {prog obj libspec flags opt} {

	variable QNX_TARGET
	variable QNX_HOST
	variable LINK_END_ARGS
	
    set flags [concat $flags [meta_option_flags $opt]]
    set libs  [make_lib_options $libspec $opt]

	set startArgs [list -b elf32-i386 -m i386nto --dynamic-linker /usr/lib/ldqnx.so.2 -rpath-link $QNX_TARGET/x86/lib:$QNX_TARGET/x86/usr/lib:$QNX_TARGET/x86/opt/lib $QNX_TARGET/x86/lib/crt1.o $QNX_TARGET/x86/lib/crti.o $QNX_HOST/usr/lib/gcc/i386-pc-nto-qnx6.3.0/4.2.1/crtbegin.o ]

    variable LINKER
	set cmd [concat [list cmd [file nativename $LINKER]] $flags]
    set cmd [concat $cmd $startArgs $obj $libs [list "-o" $prog] $LINK_END_ARGS]

    uplevel \#0 $cmd 

	if [lcontains $opt "strip"] {
		strip $prog
    }
}
