#	Title: Assembly Module
# 		TMK module for compiling Lua into bytecodes

#	Variable: LUAC
#		Set the Lua compiler executable
set_ifndef LUAC /cross/osx/usr/local/bin/luac

#	Variable: SUFFIX
#		Set the suffix of Lua files
set_ifndef SUFFIX .lua

#	Variable: DETECT_EXE
#		Automatically detect Lua program files
set_ifndef DETECT_EXE 1

set_ifndef MAKE_LIB 0

#	Variable: STRIP
#		Strip debugging information from bytecodes
set_ifndef STRIP 0

#	Variable: PROJLIBS
#		Paths to project libraries that the current build target depends on.
#		These paths are relative to the `$::PROJROOT` directory and will be
#		recursed into and built as needed.
set_ifndef PROJLIBS {}

#	Variable: EXE_OBJ
#		Objects to be turned into executables
set_ifndef EXE_OBJ {}

module { link }

proc options {} {
	if $lua::STRIP {
		return "-s"
	}
	return ""
}

proc is_executable { luafile } {
	# get first line
	read_file $luafile txt
	
	set exp {^\s*#!}
	return [regexp -- $exp $txt]
}

proc exports_module { fileName mod } {
	read_file $fileName txt
	
	# remove all comments
	regsub -all -- {--\[(=*)\[.*?]\1]\n} $txt "" txt
	regsub -all -- {--.*?\n} $txt "" txt
	
	# find all module statements
	set txt [split $txt "\n"]
	foreach line $txt {
		if { [regexp {module\(?\s*("|')(.+)\1} $line match quote name] } {
			if { $name == $mod } {
				return 1
			}
		}
	}
	
	return 0
}

proc make_dep { luafile } {
	set dependencies {}
	read_file $luafile txt
	
	# remove all comments
	regsub -all -- {--\[(=*)\[.*?]\1]\n} $txt "" txt
	regsub -all -- {--.*?\n} $txt "" txt
	
	# find all require statements
	set txt [split $txt "\n"]
	foreach line $txt {
		if { [regexp {require\(?\s*("|')(.+)\1} $line match quote name] } {
			set dirs [concat $::SUBDIR $lua::PROJLIBS]
			foreach dir $dirs {
				set path [file join $::PROJROOT $dir]
				set files [glob -nocomplain -directory $path *.lua]
				set found 0
				foreach f $files {
					if [lua::exports_module $f $name] {
						set dep [file join $dir [tmk_output_dir] [file tail $f]o]
						lappend dependencies $dep
						set found 1
						break
					}
				}
				if { ! $found } {
					if { [lsearch $files [file join "*" ${name}.lua]] >= 0 } {
						lappend dependencies [file join $dir [tmk_output_dir] ${name}.luao]
						set found 1
						break
					}
				}
			}
		}
	}
	
	return $dependencies
}

proc make_obj { luafile {objfile {}} } {
    if { $objfile == {} } {
		set objfile ${luafile}o
    }
	file mkdir [tmk_output_dir]
	set dep [lua::make_dep $luafile]
	write_file [file join [tmk_output_dir] ${objfile}.dep] dep
	
    target $objfile $luafile {
		eval cmd [list $lua::LUAC] [lua::options] [list -o $TARGET $SRC]
    }
	depend $objfile [lmap $dep { [file join $::PROJROOT $ITEM] }]
    build $objfile

	if $lua::DETECT_EXE {
		if [lua::is_executable $luafile] {
			lappend lua::EXE_OBJ $objfile
		}
	}
}

proc build_dep_tree { objfile {initialdep {}} } {
	set dependencies {}
	
	set oldDir [pwd]
	cd $::PROJROOT
	read_file ${objfile}.dep txt
	cd $oldDir
	
	set immidiate [lfilter $txt { [string length $ITEM] > 0 }]
	foreach dep $immidiate {
		if { ! [lcontains $initialdep $dep] } {
			set dependencies [concat $dependencies [lua::build_dep_tree $dep $dependencies]]
		}
	}
	
	lappend dependencies $objfile
	return $dependencies
}

proc get_dependencies { objfile } {
	return [lmap [lua::build_dep_tree [file join $::SUBDIR $objfile]] { [file join $::PROJROOT $ITEM] }]
}

proc make_lib { objs {libfile {}} } {
	if { $libfile == {} } {
		set libfile [link::unique_lib_name $::SUBDIR $::DIRTAIL].luac
    }

    target $libfile $objs {
		foreach s $SRC {
			lconcat srcs [lua::get_dependencies $s]
		}
		set files {}
		foreach f $srcs {
			if { ![lcontains $files $f] } {
				lappend files $f
			}
		}
	
		eval cmd $lua::LUAC [lua::options] -o $TARGET $files
	}
    build $libfile
}

proc make_exe { objfile {exefile {}} } {
	if { $exefile == {} } {
		set exefile [file rootname $objfile].luac
    }

	lua::make_lib $objfile $exefile
}

eval_after {
	if { ![tmk::cleaning] } {
	
		set currentdir [pwd]
		foreach dir $lua::PROJLIBS {
			set path [file join $::PROJROOT $dir]
			if { $path != $currentdir } {
				if { [::tmk::handle_subdirs $path $currentdir] } {
					log_msg "back in directory $currentdir"
				}
			}
		}

		set srcs [glob -nocomplain *$SUFFIX]
	    foreach file $srcs {
		    lua::make_obj $file
		}

		if $lua::DETECT_EXE {
			foreach obj $lua::EXE_OBJ {
				lua::make_exe $obj
			}
		}
		
		if { [llength $lua::EXE_OBJ] == 0 } {
			if $lua::MAKE_LIB {
				lua::make_lib $srcs
			}
		}
	}
}
